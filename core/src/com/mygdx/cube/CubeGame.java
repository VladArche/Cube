package com.mygdx.cube;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.VertexAttributes;
import com.badlogic.gdx.graphics.g3d.Environment;
import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.graphics.g3d.Model;
import com.badlogic.gdx.graphics.g3d.ModelBatch;
import com.badlogic.gdx.graphics.g3d.ModelInstance;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.environment.DirectionalLight;
import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;

public class CubeGame extends Game {

    public PerspectiveCamera camera;
    public ModelBatch modelBatch;
    public Environment environment;

    private static final Material WhiteColor = new Material(ColorAttribute.createDiffuse(Color.WHITE));
    private static final Material BlueColor = new Material(ColorAttribute.createDiffuse(Color.BLUE));
    private static final Material RedColor = new Material(ColorAttribute.createDiffuse(Color.RED));
    private static final Material YellowColor = new Material(ColorAttribute.createDiffuse(Color.YELLOW));
    private static final Material GreenColor = new Material(ColorAttribute.createDiffuse(Color.GREEN));
    private static final Material OrangeColor = new Material(ColorAttribute.createDiffuse(new Color(0xDD9917FF)));
    private static final Material BlackColor = new Material(ColorAttribute.createDiffuse(Color.DARK_GRAY));
    private Model BlackBox,WhiteTile,YellowTile,GreenTile,BlueTile,RedTile,OrangeTile;
    public ModelInstance[] WhiteCubeInstances,RedCubeInstances,GreenCubeInstances,BlueCubeInstances,YellowCubeInstances,OrangeCubeInstances;
    public ModelInstance[] DoubleModels, TripleModels;
    public float[][] DoubleTranslation = {{0,31f,31f},{0,-31f,-31f},{0,31f,-31f},{0,-31f,31f},{31f,0,31f},{-31f,0,-31f},{-31f,0,31f},{31f,0,-31f},{-31,31f,0},{31f,-31f,0},{31f,31f,0},{-31f,-31f,0}};
    public float[][] TripleTranslation = {{31f,31f,31f},{-31f,-31f,-31f},{31f,31f,-31f},{-31f,-31f,31f},{31f,-31f,31f},{-31f,31f,-31f},{-31f,31f,31f},{31f,-31f,-31f}};

    public static long time;
    public static boolean HintOn = true, Broken = false;

    @Override
    public void create() {
        time = System.currentTimeMillis();

        ModelBuilder modelBuilder = new ModelBuilder();
        BlackBox = modelBuilder.createBox(29f,29f,29f,BlackColor, VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
        WhiteTile = modelBuilder.createBox(25f,31f,25f,WhiteColor,VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
        YellowTile = modelBuilder.createBox(25f,31f,25f,YellowColor,VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
        GreenTile = modelBuilder.createBox(25f,25f,31f,GreenColor,VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
        BlueTile = modelBuilder.createBox(25f,25f,31f,BlueColor,VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
        RedTile = modelBuilder.createBox(31f,25f,25f,RedColor,VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
        OrangeTile = modelBuilder.createBox(31f,25f,25f,OrangeColor,VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);

        camera = new PerspectiveCamera(70, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        camera.position.set(125f, 125f, 0f);
        camera.lookAt(0, 0, 0);
        camera.near = 1f;
        camera.far = 300f;
        camera.update();

        WhiteCubeInstances = new ModelInstance[2];
        WhiteCubeInstances[0] = new ModelInstance(BlackBox);
        WhiteCubeInstances[1] = new ModelInstance(WhiteTile);
        WhiteCubeInstances[0].transform.translate(0,31f,0);
        WhiteCubeInstances[1].transform.translate(0,31,0);
        YellowCubeInstances = new ModelInstance[2];
        YellowCubeInstances[0] = new ModelInstance(BlackBox);
        YellowCubeInstances[1] = new ModelInstance(YellowTile);
        YellowCubeInstances[0].transform.translate(0,-31f,0);
        YellowCubeInstances[1].transform.translate(0,-31,0);
        RedCubeInstances = new ModelInstance[2];
        RedCubeInstances[0] = new ModelInstance(BlackBox);
        RedCubeInstances[1] = new ModelInstance(RedTile);
        RedCubeInstances[0].transform.translate(31f,0,0);
        RedCubeInstances[1].transform.translate(31,0,0);
        GreenCubeInstances = new ModelInstance[2];
        GreenCubeInstances[0] = new ModelInstance(BlackBox);
        GreenCubeInstances[1] = new ModelInstance(GreenTile);
        GreenCubeInstances[0].transform.translate(0,0,31f);
        GreenCubeInstances[1].transform.translate(0,0,31);
        BlueCubeInstances = new ModelInstance[2];
        BlueCubeInstances[0] = new ModelInstance(BlackBox);
        BlueCubeInstances[1] = new ModelInstance(BlueTile);
        BlueCubeInstances[0].transform.translate(0,0,-31f);
        BlueCubeInstances[1].transform.translate(0,0,-31);
        OrangeCubeInstances = new ModelInstance[2];
        OrangeCubeInstances[0] = new ModelInstance(BlackBox);
        OrangeCubeInstances[1] = new ModelInstance(OrangeTile);
        OrangeCubeInstances[0].transform.translate(-31f,0,0);
        OrangeCubeInstances[1].transform.translate(-31,0,0);

        DoubleModels = new ModelInstance[36];
        DoubleModels[0] = new ModelInstance(BlackBox);
        DoubleModels[1] = new ModelInstance(WhiteTile);
        DoubleModels[2] = new ModelInstance(GreenTile);
        DoubleModels[0].transform.translate(DoubleTranslation[0][0], DoubleTranslation[0][1], DoubleTranslation[0][2]);
        DoubleModels[1].transform.translate(DoubleTranslation[0][0], DoubleTranslation[0][1], DoubleTranslation[0][2]);
        DoubleModels[2].transform.translate(DoubleTranslation[0][0], DoubleTranslation[0][1], DoubleTranslation[0][2]);
        DoubleModels[3] = new ModelInstance(BlackBox);
        DoubleModels[4] = new ModelInstance(YellowTile);
        DoubleModels[5] = new ModelInstance(BlueTile);
        DoubleModels[3].transform.translate(DoubleTranslation[1][0], DoubleTranslation[1][1], DoubleTranslation[1][2]);
        DoubleModels[4].transform.translate(DoubleTranslation[1][0], DoubleTranslation[1][1], DoubleTranslation[1][2]);
        DoubleModels[5].transform.translate(DoubleTranslation[1][0], DoubleTranslation[1][1], DoubleTranslation[1][2]);
        DoubleModels[6] = new ModelInstance(BlackBox);
        DoubleModels[7] = new ModelInstance(WhiteTile);
        DoubleModels[8] = new ModelInstance(BlueTile);
        DoubleModels[6].transform.translate(DoubleTranslation[2][0], DoubleTranslation[2][1], DoubleTranslation[2][2]);
        DoubleModels[7].transform.translate(DoubleTranslation[2][0], DoubleTranslation[2][1], DoubleTranslation[2][2]);
        DoubleModels[8].transform.translate(DoubleTranslation[2][0], DoubleTranslation[2][1], DoubleTranslation[2][2]);
        DoubleModels[9] = new ModelInstance(BlackBox);
        DoubleModels[10] = new ModelInstance(YellowTile);
        DoubleModels[11] = new ModelInstance(GreenTile);
        DoubleModels[9].transform.translate(DoubleTranslation[3][0], DoubleTranslation[3][1], DoubleTranslation[3][2]);
        DoubleModels[10].transform.translate(DoubleTranslation[3][0], DoubleTranslation[3][1], DoubleTranslation[3][2]);
        DoubleModels[11].transform.translate(DoubleTranslation[3][0], DoubleTranslation[3][1], DoubleTranslation[3][2]);
        DoubleModels[12] = new ModelInstance(BlackBox);
        DoubleModels[13] = new ModelInstance(GreenTile);
        DoubleModels[14] = new ModelInstance(RedTile);
        DoubleModels[12].transform.translate(DoubleTranslation[4][0], DoubleTranslation[4][1], DoubleTranslation[4][2]);
        DoubleModels[13].transform.translate(DoubleTranslation[4][0], DoubleTranslation[4][1], DoubleTranslation[4][2]);
        DoubleModels[14].transform.translate(DoubleTranslation[4][0], DoubleTranslation[4][1], DoubleTranslation[4][2]);
        DoubleModels[15] = new ModelInstance(BlackBox);
        DoubleModels[16] = new ModelInstance(BlueTile);
        DoubleModels[17] = new ModelInstance(OrangeTile);
        DoubleModels[15].transform.translate(DoubleTranslation[5][0], DoubleTranslation[5][1], DoubleTranslation[5][2]);
        DoubleModels[16].transform.translate(DoubleTranslation[5][0], DoubleTranslation[5][1], DoubleTranslation[5][2]);
        DoubleModels[17].transform.translate(DoubleTranslation[5][0], DoubleTranslation[5][1], DoubleTranslation[5][2]);
        DoubleModels[18] = new ModelInstance(BlackBox);
        DoubleModels[19] = new ModelInstance(GreenTile);
        DoubleModels[20] = new ModelInstance(OrangeTile);
        DoubleModels[18].transform.translate(DoubleTranslation[6][0], DoubleTranslation[6][1], DoubleTranslation[6][2]);
        DoubleModels[19].transform.translate(DoubleTranslation[6][0], DoubleTranslation[6][1], DoubleTranslation[6][2]);
        DoubleModels[20].transform.translate(DoubleTranslation[6][0], DoubleTranslation[6][1], DoubleTranslation[6][2]);
        DoubleModels[21] = new ModelInstance(BlackBox);
        DoubleModels[22] = new ModelInstance(BlueTile);
        DoubleModels[23] = new ModelInstance(RedTile);
        DoubleModels[21].transform.translate(DoubleTranslation[7][0], DoubleTranslation[7][1], DoubleTranslation[7][2]);
        DoubleModels[22].transform.translate(DoubleTranslation[7][0], DoubleTranslation[7][1], DoubleTranslation[7][2]);
        DoubleModels[23].transform.translate(DoubleTranslation[7][0], DoubleTranslation[7][1], DoubleTranslation[7][2]);
        DoubleModels[24] = new ModelInstance(BlackBox);
        DoubleModels[25] = new ModelInstance(WhiteTile);
        DoubleModels[26] = new ModelInstance(OrangeTile);
        DoubleModels[24].transform.translate(DoubleTranslation[8][0], DoubleTranslation[8][1], DoubleTranslation[8][2]);
        DoubleModels[25].transform.translate(DoubleTranslation[8][0], DoubleTranslation[8][1], DoubleTranslation[8][2]);
        DoubleModels[26].transform.translate(DoubleTranslation[8][0], DoubleTranslation[8][1], DoubleTranslation[8][2]);
        DoubleModels[27] = new ModelInstance(BlackBox);
        DoubleModels[28] = new ModelInstance(YellowTile);
        DoubleModels[29] = new ModelInstance(RedTile);
        DoubleModels[27].transform.translate(DoubleTranslation[9][0], DoubleTranslation[9][1], DoubleTranslation[9][2]);
        DoubleModels[28].transform.translate(DoubleTranslation[9][0], DoubleTranslation[9][1], DoubleTranslation[9][2]);
        DoubleModels[29].transform.translate(DoubleTranslation[9][0], DoubleTranslation[9][1], DoubleTranslation[9][2]);
        DoubleModels[30] = new ModelInstance(BlackBox);
        DoubleModels[31] = new ModelInstance(WhiteTile);
        DoubleModels[32] = new ModelInstance(RedTile);
        DoubleModels[30].transform.translate(DoubleTranslation[10][0], DoubleTranslation[10][1], DoubleTranslation[10][2]);
        DoubleModels[31].transform.translate(DoubleTranslation[10][0], DoubleTranslation[10][1], DoubleTranslation[10][2]);
        DoubleModels[32].transform.translate(DoubleTranslation[10][0], DoubleTranslation[10][1], DoubleTranslation[10][2]);
        DoubleModels[33] = new ModelInstance(BlackBox);
        DoubleModels[34] = new ModelInstance(YellowTile);
        DoubleModels[35] = new ModelInstance(OrangeTile);
        DoubleModels[33].transform.translate(DoubleTranslation[11][0], DoubleTranslation[11][1], DoubleTranslation[11][2]);
        DoubleModels[34].transform.translate(DoubleTranslation[11][0], DoubleTranslation[11][1], DoubleTranslation[11][2]);
        DoubleModels[35].transform.translate(DoubleTranslation[11][0], DoubleTranslation[11][1], DoubleTranslation[11][2]);

        TripleModels = new ModelInstance[32];
        TripleModels[0] = new ModelInstance(BlackBox);
        TripleModels[1] = new ModelInstance(WhiteTile);
        TripleModels[2] = new ModelInstance(RedTile);
        TripleModels[3] = new ModelInstance(GreenTile);
        TripleModels[0].transform.translate(TripleTranslation[0][0], TripleTranslation[0][1],TripleTranslation[0][2]);
        TripleModels[1].transform.translate(TripleTranslation[0][0], TripleTranslation[0][1],TripleTranslation[0][2]);
        TripleModels[2].transform.translate(TripleTranslation[0][0], TripleTranslation[0][1],TripleTranslation[0][2]);
        TripleModels[3].transform.translate(TripleTranslation[0][0], TripleTranslation[0][1],TripleTranslation[0][2]);
        TripleModels[4] = new ModelInstance(BlackBox);
        TripleModels[5] = new ModelInstance(YellowTile);
        TripleModels[6] = new ModelInstance(OrangeTile);
        TripleModels[7] = new ModelInstance(BlueTile);
        TripleModels[4].transform.translate(TripleTranslation[1][0], TripleTranslation[1][1],TripleTranslation[1][2]);
        TripleModels[5].transform.translate(TripleTranslation[1][0], TripleTranslation[1][1],TripleTranslation[1][2]);
        TripleModels[6].transform.translate(TripleTranslation[1][0], TripleTranslation[1][1],TripleTranslation[1][2]);
        TripleModels[7].transform.translate(TripleTranslation[1][0], TripleTranslation[1][1],TripleTranslation[1][2]);
        TripleModels[8] = new ModelInstance(BlackBox);
        TripleModels[9] = new ModelInstance(WhiteTile);
        TripleModels[10] = new ModelInstance(RedTile);
        TripleModels[11] = new ModelInstance(BlueTile);
        TripleModels[8].transform.translate(TripleTranslation[2][0], TripleTranslation[2][1],TripleTranslation[2][2]);
        TripleModels[9].transform.translate(TripleTranslation[2][0], TripleTranslation[2][1],TripleTranslation[2][2]);
        TripleModels[10].transform.translate(TripleTranslation[2][0], TripleTranslation[2][1],TripleTranslation[2][2]);
        TripleModels[11].transform.translate(TripleTranslation[2][0], TripleTranslation[2][1],TripleTranslation[2][2]);
        TripleModels[12] = new ModelInstance(BlackBox);
        TripleModels[13] = new ModelInstance(YellowTile);
        TripleModels[14] = new ModelInstance(OrangeTile);
        TripleModels[15] = new ModelInstance(GreenTile);
        TripleModels[12].transform.translate(TripleTranslation[3][0], TripleTranslation[3][1],TripleTranslation[3][2]);
        TripleModels[13].transform.translate(TripleTranslation[3][0], TripleTranslation[3][1],TripleTranslation[3][2]);
        TripleModels[14].transform.translate(TripleTranslation[3][0], TripleTranslation[3][1],TripleTranslation[3][2]);
        TripleModels[15].transform.translate(TripleTranslation[3][0], TripleTranslation[3][1],TripleTranslation[3][2]);
        TripleModels[16] = new ModelInstance(BlackBox);
        TripleModels[17] = new ModelInstance(YellowTile);
        TripleModels[18] = new ModelInstance(RedTile);
        TripleModels[19] = new ModelInstance(GreenTile);
        TripleModels[16].transform.translate(TripleTranslation[4][0], TripleTranslation[4][1],TripleTranslation[4][2]);
        TripleModels[17].transform.translate(TripleTranslation[4][0], TripleTranslation[4][1],TripleTranslation[4][2]);
        TripleModels[18].transform.translate(TripleTranslation[4][0], TripleTranslation[4][1],TripleTranslation[4][2]);
        TripleModels[19].transform.translate(TripleTranslation[4][0], TripleTranslation[4][1],TripleTranslation[4][2]);
        TripleModels[20] = new ModelInstance(BlackBox);
        TripleModels[21] = new ModelInstance(WhiteTile);
        TripleModels[22] = new ModelInstance(BlueTile);
        TripleModels[23] = new ModelInstance(OrangeTile);
        TripleModels[20].transform.translate(TripleTranslation[5][0], TripleTranslation[5][1],TripleTranslation[5][2]);
        TripleModels[21].transform.translate(TripleTranslation[5][0], TripleTranslation[5][1],TripleTranslation[5][2]);
        TripleModels[22].transform.translate(TripleTranslation[5][0], TripleTranslation[5][1],TripleTranslation[5][2]);
        TripleModels[23].transform.translate(TripleTranslation[5][0], TripleTranslation[5][1],TripleTranslation[5][2]);
        TripleModels[24] = new ModelInstance(BlackBox);
        TripleModels[25] = new ModelInstance(WhiteTile);
        TripleModels[26] = new ModelInstance(OrangeTile);
        TripleModels[27] = new ModelInstance(GreenTile);
        TripleModels[24].transform.translate(TripleTranslation[6][0], TripleTranslation[6][1],TripleTranslation[6][2]);
        TripleModels[25].transform.translate(TripleTranslation[6][0], TripleTranslation[6][1],TripleTranslation[6][2]);
        TripleModels[26].transform.translate(TripleTranslation[6][0], TripleTranslation[6][1],TripleTranslation[6][2]);
        TripleModels[27].transform.translate(TripleTranslation[6][0], TripleTranslation[6][1],TripleTranslation[6][2]);
        TripleModels[28] = new ModelInstance(BlackBox);
        TripleModels[29] = new ModelInstance(YellowTile);
        TripleModels[30] = new ModelInstance(RedTile);
        TripleModels[31] = new ModelInstance(BlueTile);
        TripleModels[28].transform.translate(TripleTranslation[7][0], TripleTranslation[7][1],TripleTranslation[7][2]);
        TripleModels[29].transform.translate(TripleTranslation[7][0], TripleTranslation[7][1],TripleTranslation[7][2]);
        TripleModels[30].transform.translate(TripleTranslation[7][0], TripleTranslation[7][1],TripleTranslation[7][2]);
        TripleModels[31].transform.translate(TripleTranslation[7][0], TripleTranslation[7][1],TripleTranslation[7][2]);

        environment = new Environment();
        environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1f));
        environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -10f, -15f, 5f));
        modelBatch = new ModelBatch();
    }
    @Override
    public void dispose() {

        BlackBox.dispose();
        WhiteTile.dispose();
        YellowTile.dispose();
        GreenTile.dispose();
        BlueTile.dispose();
        OrangeTile.dispose();
        RedTile.dispose();
        modelBatch.dispose();

    }
}
